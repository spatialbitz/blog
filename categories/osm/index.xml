<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Osm on Spatialbits </title>
    <link>//blog.spatialbits.de/categories/osm/</link>
    <description>Recent content in Osm on Spatialbits </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Jul 2015 13:00:38 +0200</lastBuildDate>
    <atom:link href="//blog.spatialbits.de/categories/osm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>what3words addresses for OSM buildings</title>
      <link>//blog.spatialbits.de/post/what3words-addresses-for-OSM-buildings/</link>
      <pubDate>Wed, 22 Jul 2015 13:00:38 +0200</pubDate>
      
      <guid>//blog.spatialbits.de/post/what3words-addresses-for-OSM-buildings/</guid>
      <description>&lt;p&gt;A while ago I &lt;a href=&#34;//blog.spatialbits.de/post/assigning-what3words-addresses-to-OSM-building&#34;&gt;experimented&lt;/a&gt; with assigning multilingual &lt;em&gt;what3words&lt;/em&gt; addresses to OpenStreetMap buildings in Sierra Leone.
 I basically downloaded the OSM data, derived the buildings and their centroids and published a map based on CartoDB. Upon a click the what3words-API was queried for the addresses in multiple languages.&lt;/p&gt;

&lt;p&gt;There are some obvious disadvantages to this approach.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it operates on a static database - hence updates in the OSM database are not taken into account.&lt;/li&gt;
&lt;li&gt;it doesn&amp;rsquo;t scale very well. According to &lt;a href=&#34;http://taginfo.openstreetmap.org/keys/building&#34;&gt;taginfo&lt;/a&gt; there are currently &amp;gt; 157.000.000 buildings in the OSM database.&lt;/li&gt;
&lt;li&gt;A user would only want to query a few buildings of particular interest.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here is a new approach, which makes it possible to easily find what3words addresses for all OSM buildings:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http:///w3w4osm.spatialbits.de/&#34;&gt;http://w3w4osm.spatialbits.de&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just click on any building in the map and afterwards on the red dot, marking the center of the geometry. You can also search for a place/address of interest.&lt;/p&gt;

&lt;iframe src=&#34;http://spatialbitz.github.io/w3w4osm/index.html&#34; height=&#34;600&#34; width=&#34;800&#34;&gt;&lt;p&gt; Unfortunately the iframe doesn&#39;t load in your browser. You can open the map in a &lt;a href=&#34;https://spatialbitz.github.io/w3w4osm/&#34;&gt;new window&lt;/a&gt;. &lt;/p&gt;&lt;/iframe&gt; 

&lt;p&gt;Ideas/things to improve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;advanced geocoding functionality&lt;/li&gt;
&lt;li&gt;what3words geocoding support&lt;/li&gt;
&lt;li&gt;support for all what3words-languages&lt;/li&gt;
&lt;li&gt;API-error handling &amp;amp; notifications&lt;/li&gt;
&lt;li&gt;fine-tune the overpass-API calls (feature types, bbox)&lt;/li&gt;
&lt;li&gt;improve design&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;d be happy to accept pull-request, go ahead and fork the project on &lt;a href=&#34;https://github.com/spatialbitz/w3w4osm&#34;&gt;github&lt;/a&gt;!
 Also I&amp;rsquo;d love to hear feedback regarding the usefulness of this approach and/or real world applications using OSM data with what3words addresses.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Assigning what3words addresses to OSM buildings</title>
      <link>//blog.spatialbits.de/post/assigning-what3words-addresses-to-OSM-building/</link>
      <pubDate>Tue, 16 Dec 2014 13:00:38 +0200</pubDate>
      
      <guid>//blog.spatialbits.de/post/assigning-what3words-addresses-to-OSM-building/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://what3words.com/&#34;&gt;What3Words&lt;/a&gt; offers multilingual and memorizable addresses for 3x3 meter grid cells on the entire globe (more on this in an earlier &lt;a href=&#34;//blog.spatialbits.de/post/what3words-geocoder-for-geopy&#34;&gt;post&lt;/a&gt;). So with w3w it becomes possible to assign addresses e.g. to buildings even in countries without functioning traditional addressing schemes.&lt;/p&gt;

&lt;p&gt;As a demo I assigned addresses to buildings in Sierra Leone, as available in the  &lt;a href=&#34;http://www.openstreetmap.org/#map=8/8.381/-11.886&#34;&gt;OpenStreetMap&lt;/a&gt; database &lt;span style=&#34;font-size: xx-small;&#34;&gt;(open in &lt;a href=&#34;http://cdn.rawgit.com/spatialbitz/6f73b48c953d3f29bde7/raw/6093045ceeba26cd26de5ec441bad0cfe1cc06d2/gistfile1.html&#34;&gt;new window&lt;/a&gt;)&lt;/span&gt;:&lt;/p&gt;

&lt;iframe src=&#34;http://cdn.rawgit.com/spatialbitz/6f73b48c953d3f29bde7/raw/6093045ceeba26cd26de5ec441bad0cfe1cc06d2/gistfile1.html&#34; height=&#34;600&#34; width=&#34;800&#34;&gt;&lt;p&gt; Unfortunately the iframe doesn&#39;t load in your browser. You can open the map in a &lt;a href=&#34;http://cdn.rawgit.com/spatialbitz/6f73b48c953d3f29bde7/raw/6093045ceeba26cd26de5ec441bad0cfe1cc06d2/gistfile1.html&#34;&gt;new window&lt;/a&gt;. &lt;/p&gt;&lt;/iframe&gt; 

&lt;p&gt;For this example I downloaded the OSM data from &lt;a href=&#34;http://www.geofabrik.de/&#34;&gt;Geofabrik&lt;/a&gt;, loaded the buildings (&amp;gt; 420.000) into a postgreSQL database and derived the centroid for each polygon. The centroids&amp;rsquo; lat/lon coordinates are used to query the what3words API in order to receive the w3w in different languages.
 (Alternatively of course it would be possible to receive the center points of the buildings on the fly e.g. from the overpass API).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Geocoding with python and OSM</title>
      <link>//blog.spatialbits.de/post/geocoding-with-python-and-OSM/</link>
      <pubDate>Mon, 22 Sep 2014 13:00:38 +0200</pubDate>
      
      <guid>//blog.spatialbits.de/post/geocoding-with-python-and-OSM/</guid>
      <description>&lt;p&gt;Geocoding is the process of relating implicit location information (such as an address or a the name of a river) to explicit location information in form of geographic coordinates.&lt;/p&gt;

&lt;p&gt;Several companies, e.g. &lt;a href=&#34;https://developers.google.com/maps/documentation/geocoding/&#34;&gt;Google&lt;/a&gt; and &lt;a href=&#34;https://developer.here.com/geocoder&#34;&gt;Nokia/HERE&lt;/a&gt; offer commercial geocoding services/APIs. &lt;a href=&#34;http://wiki.openstreetmap.org/wiki/Nominatim&#34;&gt;Nominatim&lt;/a&gt; i&lt;em&gt;s a tool to search OSM data by name and address and to generate synthetic addresses of OSM points&lt;/em&gt; and hence a geocoder operating on the OSM database.
 While many geocoders offer easy to use APIs that can be directly utilized from a web browser, they unfold their full potential when called from e.g. a script enabling batch geocoding for many place names at once.
&lt;a href=&#34;https://github.com/geopy/geopy&#34;&gt;geopy&lt;/a&gt; is a geocoding toolbox for Python, offering access to numerous geocoding services.&lt;/p&gt;

&lt;p&gt;Here is an example of geocoding with Nominatim:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/spatialbitz/bb07486888688f8058cd.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;which returns several dicts like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{u&#39;display_name&#39;: u&#39;Elbe, Landkreis Wittenberg, Sachsen-Anhalt, Deutschland, European Union&#39;, u&#39;importance&#39;: 0.72552692721096, u&#39;place_id&#39;: u&#39;9208507982&#39;, u&#39;lon&#39;: u&#39;12.5663365&#39;, u&#39;lat&#39;: u&#39;51.867922&#39;, u&#39;osm_type&#39;: u&#39;relation&#39;, u&#39;licence&#39;: u&#39;Data \xa9 OpenStreetMap contributors, ODbL 1.0\. http://www.openstreetmap.org/copyright&#39;, u&#39;osm_id&#39;: u&#39;123822&#39;, u&#39;boundingbox&#39;: [u&#39;50.0168724060059&#39;, u&#39;54.0075302124023&#39;, u&#39;8.22170829772949&#39;, u&#39;15.9315462112427&#39;], u&#39;type&#39;: u&#39;river&#39;, u&#39;class&#39;: u&#39;waterway&#39;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Among other details these contain lat/lon coordinates and the boudning box of the feature. But wouldn&amp;rsquo;t it be nice if the result would contain the full geometry as well? Well, while this is supported by the Nominatim API it was not - until recently - by the geopy toolbox. I &lt;a href=&#34;https://github.com/spatialbitz/geopy&#34;&gt;added&lt;/a&gt; support for exactly that, so now:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/spatialbitz/85476473a8bff1197a81.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;leads to:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MULTILINESTRING((15.53613 50.7756972,15.5364593 50.7755378,15.5367906 50.7754773,15.5372784 50.7754914,15.5378943 50.7752649,15.5382691 50.7752837,15.5384418 50.7752514,15.5388037 [...])) 
LINESTRING(7.0094126 51.1325696,7.0093372 51.1324799,7.009245 51.1323739,7.0091836 51.1322698,7.0090853 51.1321503,7.0090361 51.1320982,7.0089716 51.1319945 7.0085078 51.1314622 [...])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;so the full geometries are returned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT (2014-09-23):&lt;/strong&gt;
 &lt;del&gt;(Note: Currently this is implemented in my &lt;a href=&#34;https://github.com/spatialbitz/geopy&#34;&gt;github-fork&lt;/a&gt;, it should appear in the &lt;a href=&#34;https://github.com/geopy/geopy&#34;&gt;official repo&lt;/a&gt; eventually. A pull request is pending.)&lt;/del&gt;
 The pull request has been accepted and so the functionality is now available in the &lt;a href=&#34;https://github.com/geopy/geopy&#34;&gt;official repo&lt;/a&gt; (release 1.3.0).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT (2014-10-18):&lt;/strong&gt;
 Please make sure to respect &lt;a href=&#34;http://wiki.openstreetmap.org/wiki/Nominatim_usage_policy&#34;&gt;Nominatim&amp;rsquo;s usage policy!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing OSM data with cartodb to aid HOTOSM validation</title>
      <link>//blog.spatialbits.de/post/vizualizing-osm-data-w-cartodb/</link>
      <pubDate>Sat, 06 Sep 2014 13:00:38 +0200</pubDate>
      
      <guid>//blog.spatialbits.de/post/vizualizing-osm-data-w-cartodb/</guid>
      <description>&lt;p&gt;Playing around with &lt;a href=&#34;http://cartodb.com/&#34;&gt;cartodb&lt;/a&gt; has been on my list for a while now. Also I started to contribute to &lt;a href=&#34;http://hot.openstreetmap.org/&#34;&gt;HOTOSM&lt;/a&gt; lately. During mapping and validation work for the Ebola related HOTOSM tasks I noticed that in some areas the relevant features are not mapped as expected. Presumably unexperienced mappers map e.g.  buildings as single nodes and/or don&amp;rsquo;t apply the &lt;a href=&#34;https://wiki.openstreetmap.org/wiki/Highway_Tag_Africa&#34;&gt;highway tag guidelines for Africa&lt;/a&gt; correctly. As some enthusiastic mappers may work on sparse areas in a short time its difficult track down mistakes and notify the contributor early.
 While josm offers &lt;a href=&#34;https://www.mapbox.com/blog/2012-08-15-using-filters-josm/&#34;&gt;flexible filter functionalities&lt;/a&gt; I find it hard to get a flexible overview of a wider area.&lt;/p&gt;

&lt;p&gt;Hence I wanted to find out how if and how the visualization features of cartodb could be useful here.&lt;/p&gt;

&lt;p&gt;So I signed up for a free test account at cartodb (50 MB and 5 table included) and downloaded the OSM data for Sierra Leone from &lt;a href=&#34;http://download.geofabrik.de/africa.html&#34;&gt;Geofabrik&lt;/a&gt;.
While it is possible with cartodb to import OSM data directly and extract relevant data using SQL (postgis) queries, I imported the data into a locale database and ran some queries to create three tables (csv) containing the following features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;all single nodes that are tagged as buildings&lt;/li&gt;
&lt;li&gt;all buildings that that are not tagged with &amp;lsquo;yes&amp;rsquo; (centroid points of the polygons)&lt;/li&gt;
&lt;li&gt;all start points of highways that are not tagged according to the guidelines&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To make it easy to evaluate single features in josm I wrote a python script to add a column in the csv table that contains a link that downloads the feature in josm, using the remote plugin.&lt;/p&gt;

&lt;p&gt;Uploading the csv to cartodb and creating visualizations is easy then, resulting in the following map:&lt;/p&gt;

&lt;iframe src=&#34;http://spatialbits.cartodb.com/viz/3a66c076-3210-11e4-930e-0edbca4b5057/embed_map&#34; height=&#34;600&#34; width=&#34;800&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;(Point data &lt;a href=&#34;http://www.openstreetmap.org/copyright/en&#34;&gt;copyright by OpenStreetMap contributors&lt;/a&gt; under the &lt;a href=&#34;http://opendatacommons.org/licenses/odbl/&#34;&gt;ODbL&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The first layer (&amp;lsquo;single nodes buildings&amp;rsquo;) shows some clusters where buildings are mapped as single nodes, e.g. just south of &amp;lsquo;Bo&amp;rsquo;, an area that was mapped as part of the HOTOSM &lt;a href=&#34;http://tasks.hotosm.org/project/605&#34;&gt;task #605&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second layer (&amp;lsquo;building != yes&amp;rsquo;) shows all centroids of buildings and the color indicates the tag. Some clusters, e.g. where buildings are tagged as &amp;lsquo;house&amp;rsquo; become obvious.&lt;/p&gt;

&lt;p&gt;The third layer then shows the starting nodes of highways and their related tags though the color, showing e.g. a lot of &amp;lsquo;footways&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Cartodb is easy to use and leads to quick visualization results, revealing areas with (potential) mapping/quality issues to further evaluate.
 I just set this up as an experiment. As the OSM map evolves the pictures will change and hence my map will out date. However cartodb offers synchronization with data sources. So it would be rather easy to implement a workflow that creates e.g. a daily picture of a given area and a focus on specific validation issues.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>